library(e1071)
library(pmml)
library(randomForest)
library(nnet)
library(rgl)
library(rpart)
library(mgcv)


#Fun with Logistic Regression and friends (RF and SVM)
#Set parameters for map, variables, 
clr1 <- c(rgb(1,0,0,1),rgb(0,0,1,1))
clr2 <- c(rgb(1,0,0,.2),rgb(0,0,1,.2))
x <- c(.4,.55,.65,.9,.1,.35,.5,.15,.2,.85)
y <- c(.85,.95,.8,.87,.5,.55,.5,.2,.1,.3)
z <- c(1,1,1,1,1,0,0,1,0,0)
df <- data.frame(x,y,z)

plot(x,y,pch=19,cex=2)
plot(x,y,pch=19,cex=2,col=clr1[z+1])

#Goal is we want to predict
#Try logistic regression
reg=glm(z~x+y,data=df,family=binomial)
summary(reg)
pred_1 <- function(x,y){predict(reg,newdata=data.frame(x=x,y=y),type="response")>.5 }
x_grid<-seq(0,1,length=101)
y_grid<-seq(0,1,length=101)
z_grid <- outer(x_grid,y_grid,pred_1)
image(x_grid,y_grid,z_grid,col=clr2, main="Classification Using Logistic Regression")
points(x,y,pch=19,cex=2,col=clr1[z+1])


rfpred <- randomForest(z~x+y,data=df)
summary(rfpred)
pred_2 <- function(x,y){predict(rfpred,newdata=data.frame(x=x,y=y),type="response")>.5 }
x_grid<-seq(0,1,length=101)
y_grid<-seq(0,1,length=101)
z_grid <- outer(x_grid,y_grid,pred_2)
image(x_grid,y_grid,z_grid,col=clr2, main="Classification Using Decision Trees")
points(x,y,pch=19,cex=2,col=clr1[z+1])

sppvect <- svm(z~x+y,data=df, kernel='radial')
summary(sppvect)
pred_2 <- function(x,y){predict(sppvect,newdata=data.frame(x=x,y=y),type="response")>.5 }
x_grid<-seq(0,1,length=101)
y_grid<-seq(0,1,length=101)
z_grid <- outer(x_grid,y_grid,pred_2)
image(x_grid,y_grid,z_grid,col=clr2, main="Classification Using Support Vector Machines")
points(x,y,pch=19,cex=2,col=clr1[z+1])

nnetpred <- nnet(z~x+y,data=df, size=100, softmax=FALSE)
summary(nnetpred)
pred_2 <- function(x,y){predict(nnetpred,newdata=data.frame(x=x,y=y),type="raw")>.5 }
x_grid<-seq(0,1,length=101)
y_grid<-seq(0,1,length=101)
z_grid <- outer(x_grid,y_grid,pred_2)
image(x_grid,y_grid,z_grid,col=clr2, main="Classification Using Neural Networks")
points(x,y,pch=19,cex=2,col=clr1[z+1])

n <- 5000
rtf <- function(x1, x2) { 
  sin(x1+x2)/(x1+x2) }

xgrid <- seq(1,6,length=31)
ygrid <- seq(1,6,length=31)
zgrid <- outer(xgrid,ygrid,rtf)
persp(xgrid,ygrid,zgrid,theta=30, phi=30, col="yellow", ticktype="detailed",shade=TRUE)

df <- data.frame(x1=(runif(n, min=1, max=6)), x2=(runif(n, min=1, max=6)))
df$m=rtf(df$x1, df$x2)
df$y=df$m+rnorm(n,sd=.07)

plot3d(df$x1,df$y,df$x2, col='grey')

reg=lm(y~I(x1^6)+I(x2^6),data=df)
actual <- df$y
predicted <- predict(reg,newdata=df)
p=function(x1,x2) predict(reg,newdata=data.frame(x1=x1,x2=x2))
grid=seq(1,6,length=31)
ygrid=seq(1,6,length=31)
zgrid=outer(xgrid,ygrid,p)
persp(xgrid,ygrid,zgrid,theta=30, phi=30,col="green",shade=TRUE)
persp3d(xgrid, ygrid, zgrid, color="green")
#Compared to the RootMeanSqaure the lower value the better, reducing the error
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
rsq
RMSE <- sqrt(mean((actual-predicted)^2))
RMSE


reg=rpart(y~x1+x2,data=df,method="anova")
actual <- df$y
predicted <- predict(reg,newdata=df)
p=function(x1,x2) predict(reg,newdata=data.frame(x1=x1,x2=x2),type="vector")
zgrid=outer(xgrid,ygrid,p)
persp(xgrid,ygrid,zgrid,theta=30, phi=30, col="lightblue",shade=TRUE)
persp3d(xgrid, ygrid, zgrid, color='lightblue')
#Compared to the RootMeanSqaure the lower value the better, reducing the error
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
rsq
RMSE <- sqrt(mean((actual-predicted)^2))
RMSE

reg=randomForest(y~x1+x2,data=df)
actual <- df$y
predicted <- predict(reg,newdata=df)
p=function(x1,x2) as.numeric(predict(reg,newdata=data.frame(x1=x1,x2=x2),type="response"))
zgrid=outer(xgrid,ygrid,p)
persp(xgrid,ygrid,zgrid,theta=30, phi=30,col="orange",shade=TRUE)
persp3d(xgrid, ygrid, zgrid, color="orange")
#Compared to the RootMeanSqaure the lower value the better, reducing the error
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
rsq
RMSE <- sqrt(mean((actual-predicted)^2))
RMSE


reg=svm(y~x1+x2,data=df)
actual <- df$y
predicted <- predict(reg,newdata=df)
p=function(x1,x2) as.numeric(predict(reg,newdata=data.frame(x1=x1,x2=x2),type="response"))
zgrid=outer(xgrid,ygrid,p)
persp(xgrid,ygrid,zgrid,theta=30, phi=30,col="red",shade=TRUE)
persp3d(xgrid, ygrid, zgrid, color="red")
#Compared to the RootMeanSqaure the lower value the better, reducing the error
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
rsq
RMSE <- sqrt(mean((actual-predicted)^2))
RMSE

reg=gam(y~s(x1,x2),data=df)
actual <- df$y
predicted <- predict(reg,newdata=df)
p=function(x1,x2) as.numeric(predict(reg,newdata=data.frame(x1=x1,x2=x2),type="response"))
zgrid=outer(xgrid,ygrid,p)
persp(xgrid,ygrid,zgrid,theta=30, phi=30,col="grey",shade=TRUE)
persp3d(xgrid, ygrid, zgrid, color="grey")
#Compared to the RootMeanSqaure the lower value the better, reducing the error
rsq <- 1-sum((actual-predicted)^2)/sum((actual-mean(actual))^2)
rsq
RMSE <- sqrt(mean((actual-predicted)^2))
RMSE
